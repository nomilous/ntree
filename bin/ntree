#!/usr/bin/env node

var cmd = require('commander');
var path = require('path');
var repl = require('repl');
var mountPoint;
var scanInterval;
var followSymlinks;

cmd.usage('[options] <directory>');

// cmd.description('eg: ntree --lazy ~/ntree/point');

cmd.option('');
// cmd.option('--lazy',    'use lazy loading');
cmd.option('--debug',              'print debug info');
cmd.option('--json',               'print json and exit');
cmd.option('');
cmd.option('--follow-symlinks',    'be careful of circles');
cmd.option('');
cmd.option('--scan-interval [ms]', 'milliseconds between key scans');
cmd.option('--no-sync-in',         'disable sync from disk to tree');
cmd.option('--no-sync-out',        'disable sync from tree to disk');
cmd.option('--no-sync',            'neither in or out');
cmd.option('');
cmd.option('--patch-noop',         'include noop patch operations');
cmd.option('--patch-previous',     'include previous in patch replace ops');
cmd.option('');
cmd.option('--doc-file',           'include doc filepath');

cmd.parse(process.argv);

if (!cmd.args[0]) {
  console.error('\n  Error: missing <directory>');
  cmd.help();
  process.exit(1);
}


mountPoint = cmd.args[0]; // ? cmd.args[0][0] == '/' ? cmd.args[0] : process.cwd() + path.sep + cmd.args[0] : process.cwd();

if (path.isAbsolute && path.isAbsolute(mountPoint)) {
} else if (mountPoint[1] == ':' && mountPoint[2] == '\\') { // windows, does this work in absence of isAbsolute
} else if (mountPoint[0] == '/') {
} else mountPoint = path.normalize(process.cwd() + path.sep + mountPoint);

// lazy as true if no mountpoint specified
// cmd.lazy = cmd.args[0] ? typeof cmd.lazy == 'boolean' ? cmd.lazy : false : true;

if (cmd.debug) {
  if (process.env.DEBUG) {
    process.env.DEBUG += ',ntree*';
  } else {
    process.env.DEBUG = 'ntree*';
  }
}

scanInterval = typeof cmd.scanInterval === 'undefined' ? 20 : parseInt(cmd.scanInterval);
followSymlinks = typeof cmd.followSymlinks === 'undefined' ? false : cmd.followSymlinks;

var ntree = require('../'); // intentionally after env.DEBUG

ntree.create({
  mount: mountPoint,
  syncIn: cmd.syncIn && cmd.sync,
  syncOut: cmd.syncOut && cmd.sync,
  agent: {
    scanInterval: scanInterval
  },
  watcher: {
    followSymlinks: followSymlinks,
    // more options for watcher: https://github.com/paulmillr/chokidar
  },
  doc: {
    path: true,
    file: typeof cmd.docFile !== 'undefined',
  },
  patch: {
    noop: typeof cmd.patchNoop !== 'undefined',
    previous: typeof cmd.patchPrevious !== 'undefined',
  },
  // onError: function(e) {
  //   if (e instanceof ntree.Errors.MultipleSourceError) {
  //     console.log(e.toString(), 'from', e.info.sources.map(function(s) {
  //       return s.filePath;
  //     }).join(' and '));
  //   }
  // }
  // lazy: cmd.lazy,
})

.then(function(tree) {

  if (cmd.json) {
    console.log(JSON.stringify(tree, null, 2));
    process.exit(0);
  }

  var r = repl.start({
    input: process.stdin,
    output: process.stdout,
    ignoreUndefined: true,
  });

  r.context.$tree = tree;

  require('repl.history')(r, process.env.HOME + '/.ntree_node_history');

})

.catch(function(e) {

  console.log(e.stack);
  process.exit(e.errno || 1);
  
});
